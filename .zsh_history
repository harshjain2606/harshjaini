 brew install git
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
brew install git
brew install git
brew install git
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
brew install git
brew install git
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
echo >> /Users/harshjain/.zprofile
echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> /Users/harshjain/.zprofile
eval "$(/opt/homebrew/bin/brew shellenv)"
brew upgrade
brew install git
git config --global user.name "Harshjain2606"
git config --global user.email jaainharsh383@gmail.com
git config --list
git init
git init
git init
xcode-select --install
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
brew tap mongodb/brew
brew install mongodb-community@6.0
mongo --version
mongo--version
mongosh --version
mongod --version
brew services start mongodb-community@6.0
mongo
mongosh
npm start
cd  find-Best-main
npm install
npm start
npm start
node start
node server.js
git init
cd-find-best-main
npm install
nodemon install
node server.js
npm run start
npm run
git init
npm start
npm start
npm run
npm start
npm start
npm run
npm start
npm install
npm install
npm start
npm install\

npm install
npm install express
npm start
node server.js
git init
brew services start zookeeper
brew install kafka
brew services start zookeeper
brew services start kafka
echo SPATH
echo $PATH
/opt/homebrew/bin/kafka-topics
/opt/hombew/bin/kafka-topics --list --bootstrap-server localhost:9092
/opt/homebrew/bin/kafka-topics --create --bootstrap-server localhost:9092
/opt/homebrew/bin/kafka-topics --create --bootsrap-server localhost:9092 --topic test_kafka
        Display Kafka version.                 \
harshjain@Harshs-MacBook-Air ~ % /opt/homebrew/bin/kafka-topics --list  --bootsrap-server localhost:9092
     /opt/homebrew/bin/kafka-topics --list  --bootstrap-server localhost:9092\

/opt/homebrew/bin/kafka-topics --create --bootstrap-server localhost:9092 --topic test_kafka
/opt/homebrew/bin/kafka-topics --list --bootstrap-server localhost:9092 --topic test_kafka
docker
docker -v
docker run -it ubuntu
docker run -it ubuntu
docker start lucid_neumann
docker stop lucid_neumann
docker run -it nide
docker run it node
docker run -it node
npm init
npm i express
docker build -t youtube-node.js
 docker build -t youtube-node.js.
 docker build -t youtube-node.js .
 docker build -t youtube-node.js
docker run -it node
cd Coding
kafka-topics.sh
docker exec -it kafka kafka-topics --create --topic poll-votes --bootstrap-server localhost:9092 --partitions 3 --replication-factor 1\

kafka-topics.sh
docker-compose up -d\

docker build -t youtube-nodejs .
clear
docker-compose up -d\

docker exec -it kafka kafka-topics --create --topic poll-votes --bootstrap-server localhost:9092 --partitions 3 --replication-factor 1\

mkdir polling-system && cd polling-system\
npm init -y\
npm install express kafka-node pg ws body-parser\

docker run --name postgres -e POSTGRES_PASSWORD=yourpassword -d -p 5432:5432 postgres\

docker exec -it kafka kafka-topics --create --topic poll-votes --bootstrap-server localhost:9092 --partitions 3 --replication-factor 1\

docker ps\

docker ps -a\

docker start <container_name_or_id>\

docker start <33ed8e5ee370  >
docker exec -it <container_name_or_id> kafka-topics --create --topic poll-votes --bootstrap-server localhost:9092 --partitions 3 --replication-factor 1\

mkdir e-commerce-project\
cd e-commerce-project\
npm init -y\

npm install express mongoose cors bcryptjs jsonwebtoken dotenv body-parser\
npm install --save-dev nodemon\

npx create-react-app frontend\
cd frontend\
npm install axios react-router-dom\

c
npm server.js
node server.js
node server.js
node index.js
npm start
node server.js
node server.js
node server.js
git init
node server.js
node server.js
node server.js
node server.ks
node server.js
mkdir ecommerce-project\
cd ecommerce-project\
npm init -y\
npm install express mongoose bcrypt jsonwebtoken dotenv body-parser cors\
npm install --save-dev nodemon\

mkdir ecommerce-project\
cd ecommerce-project\
npm init -y\
npm install express mongoose bcrypt jsonwebtoken dotenv body-parser cors\
npm install --save-dev nodemon\

node server.js
npx create-react-app ecommerce-frontend\
cd ecommerce-frontend\
npm install axios react-router-dom\

