package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"entgql-crud/ent"
	"entgql-crud/graph/model"
	"fmt"
	"strconv"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*ent.User, error) {
	u, err := r.Client.User.
		Create().
		SetName(input.Name).
		SetEmail(input.Email).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	return u, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.UpdateUser) (*ent.User, error) {
	userid, _ := strconv.Atoi(id)
	update := r.Client.User.UpdateOneID(userid)
	if input.Name != nil {
		update = update.SetName(*input.Name)
	}
	if input.Email != nil {
		update = update.SetEmail(*input.Email)
	}

	un, err := update.Save(ctx)
	if err != nil {
		return nil, err
	}

	return un, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	deleteid, _ := strconv.Atoi(id)
	return true, r.Client.User.DeleteOneID(deleteid).Exec(ctx)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*ent.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*ent.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
